datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  password          String
  balance           Float              @default(0.0)
  affiliateBalance  Float              @default(0.0)
  pixKey            String?
  role              String             @default("USER")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  transactions      Transaction[]
  smsActivations    SmsActivation[]
  affiliateLinks    AffiliateLink[]    @relation(name: "AffiliateLink")
  referredByLink    AffiliateLink?     @relation(name: "ReferredBy", fields: [referredByLinkId], references: [id])
  referredByLinkId  Int?
  withdrawalRequests WithdrawalRequest[]
  emailVerified     Boolean            @default(false)
  confirmationToken String?            @unique
}

model Transaction {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  amount         Float
  type           String
  status         String
  description    String?
  smsActivationId Int?
  smsActivation  SmsActivation? @relation(fields: [smsActivationId], references: [id])
  createdAt      DateTime      @default(now())
}

model SmsActivation {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  service      String
  country      String
  number       String
  code         String?
  status       String
  activationId String?       @unique
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Markup {
  id           Int      @id @default(autoincrement())
  percentage   Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ServicePrice {
  id           Int      @id @default(autoincrement())
  service      String
  country      String
  priceUsd     Float
  priceBrl     Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AffiliateLink {
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(name: "AffiliateLink", fields: [userId], references: [id])
  code         String        @unique
  referredUsers User[]        @relation(name: "ReferredBy")
  createdAt    DateTime      @default(now())
}

model WithdrawalRequest {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  amount       Float
  pixKey       String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AffiliateCommission {
  id           Int      @id @default(autoincrement())
  percentage   Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}